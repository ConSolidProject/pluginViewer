(self.webpackChunkviewer=self.webpackChunkviewer||[]).push([[487],{1487:(t,e,a)=>{"use strict";a.r(e),a.d(e,{checkExistence:()=>f,checkInvites:()=>k,createLBDLocation:()=>P,createProject:()=>C,createResource:()=>H,deleteResource:()=>h,executeQuery:()=>p,findObjectAliases:()=>I,getAccessRights:()=>A,getAuthorisedFilesInRepository:()=>R,getLBDlocation:()=>T,getLocalContexts:()=>$,getMyArtefactRegistry:()=>L,getMyProjectRepository:()=>S,getProjectDataFromStakeholder:()=>v,getProjectId:()=>m,getProjectsFromAggregator:()=>x,getStakeholdersFromProject:()=>E,loadProjectMetadata:()=>g,update:()=>j,uploadResource:()=>W});var n=a(55877);const r=a(4501),{DataFactory:o}=r,{namedNode:i,literal:s,defaultGraph:c,quad:w}=o,l=a(7265).newEngine,{v4:d}=a(55877);async function p(t,e,a){const n=new r.Store;for(const t of e)try{const e=await a.fetch(t),o=await e.text(),i=new r.Parser;await b(o,n,i,t)}catch(t){console.log(t)}const o="\nprefix ldp: <http://www.w3.org/ns/ldp#> \nprefix lbd: <https://lbdserver.org/vocabulary#>\nprefix dcat: <http://www.w3.org/ns/dcat#>\nprefix owl: <http://www.w3.org/2002/07/owl#> \n "+t,i=l();return await i.query(o,{sources:[n]})}async function f(t,e){try{const a={method:"HEAD"};return 200===(await e.fetch(t,a)).status}catch(e){throw e.message=`Could not check existence of graph ${t} - ${e.message}`,e}}async function h(t,e){try{var a={method:"DELETE"};await e.fetch(t.main,a),await e.fetch(t.metadata,a);var n={method:"PATCH",headers:{"Content-Type":"application/sparql-update"},body:`\nprefix ldp: <http://www.w3.org/ns/ldp#> \nprefix lbd: <https://lbdserver.org/vocabulary#>\nprefix dcat: <http://www.w3.org/ns/dcat#>\nprefix owl: <http://www.w3.org/2002/07/owl#> \n DELETE WHERE {\n    ?art lbd:hasLinkElement ?le .\n    ?le lbd:hasDocument <${t.main}> ; lbd:hasIdentifier ?identifier .\n    ?identifier lbd:identifier ?id .\n  }`,redirect:"follow"};return console.log("resource.artefactRegistry",t.artefactRegistry),void await e.fetch(t.artefactRegistry,n)}catch(t){console.log("error",t)}}async function u(t,e){const a={};for(const n of e)try{const e=await t.bindings();a[n]=e.map((t=>t.get("?"+n).id)).filter((t=>null!=t))}catch(t){console.log("error",t)}return a}async function g(t,e,a){try{const n=await m(t),o=await E(t,a);for(const t of o){const o=await T(t,a)+n+"/artefactRegistry.ttl",i=await a.fetch(o);if(i){const t=await i.text();if(t){const a=new r.Parser;await b(t,e,a,o)}}else console.log(t,"has no artefact registry")}}catch(t){console.log("error",t)}}function y(t,e){if(t.id.startsWith("http"))return i(t.id);if(t.id.startsWith('"')){const e=t.id.replaceAll('"',"");return s(e)}return i(e+t.id)}function b(t,e,a,n){return new Promise(((r,o)=>{t&&a.parse(t,((t,a,o)=>{if(t&&console.log(t),a){const t=y(a.subject,n),r=y(a.predicate,n),o=y(a.object,n),i=w(t,r,o,c());e.addQuad(i)}else r()}))}))}async function x(t,e){let a=t;a.endsWith("/")||(a+="/");const n=await p("\n  SELECT ?project WHERE {\n    ?s a lbd:Aggregator ;\n      ldp:contains ?project .\n  }",[a],e),{project:r}=await u(n,["project"]);return r}async function m(t,e){return t.split("/")[t.split("/").length-2]}async function E(t,e){let a=t;a.endsWith("/")||(a+="/");const n=`\n  SELECT ?st WHERE {\n    <${t}> a lbd:PartialProject ;\n      lbd:hasMember ?st .\n  }`,r=await p(n,[t],e),{st:o}=await u(r,["st"]);return o}async function v(t,e,a){const n=await T(t,a);e.endsWith("/")||(e+="/");const r=n+e;return{stakeholder:t,data:await R(r,a)}}async function R(t,e){const a=`\n    SELECT ?dataset WHERE {\n      <${t}> ldp:contains ?dataset .\n    }\n  `,n=await p(a,[t],e),{dataset:r}=await u(n,["dataset"]),o=r.filter((t=>t.endsWith("props.ttl"))),i=[];for(const a of o){const n=await A(a,e),r="\n    SELECT ?uri WHERE {\n      ?meta a dcat:Dataset ;\n      dcat:distribution ?dist .\n      ?dist dcat:downloadURL ?uri .\n    }",o=await p(r,[a],e),{uri:s}=await u(o,["uri"]);i.push({artefactRegistry:t+"artefactRegistry.ttl",accessRights:n,metadata:a,main:s[0]})}return i}async function A(t,e){return(await e.fetch(t,{method:"HEAD"})).headers.get("WAC-Allow").split(",")[0].replace("user=","").replaceAll('"',"").split(" ")}async function T(t,e){const a=`\nprefix ldp: <http://www.w3.org/ns/ldp#> \nprefix lbd: <https://lbdserver.org/vocabulary#>\nprefix dcat: <http://www.w3.org/ns/dcat#>\nprefix owl: <http://www.w3.org/2002/07/owl#> \n select ?index where {<${t}> lbd:hasProjectRegistry ?index}`,n=await p(a,[t.replace("#me","")],e);let{index:r}=await u(n,["index"]);return r.length>0?(r[0].endsWith("/")||(r+="/"),r[0]):null}async function j(t,e,a){try{var n={method:"PATCH",headers:{"Content-Type":"application/sparql-update"},body:t,redirect:"follow"};let r;return void(r=await a.fetch(e,n))}catch(t){throw console.log("error",t),t}}async function I(t,e,a){const n=`\n  SELECT ?alias WHERE {\n  <${t}> owl:sameAs ?alias .\n  }\n  `,r=await p(n,e,a),{alias:o}=await u(r,["alias"]);return o}async function $(t,e,a){}async function P(t){if(t.info.isLoggedIn){let e=await T(t.info.webId,t);e||(e=t.info.webId.replace("/profile/card#me","/lbd/"));const a=`\nprefix ldp: <http://www.w3.org/ns/ldp#> \nprefix lbd: <https://lbdserver.org/vocabulary#>\nprefix dcat: <http://www.w3.org/ns/dcat#>\nprefix owl: <http://www.w3.org/2002/07/owl#> \n INSERT DATA {\n      <${t.info.webId}> lbd:hasProjectRegistry <${e}> .\n    }`;await j(a,t.info.webId,t);const n=`\nprefix ldp: <http://www.w3.org/ns/ldp#> \nprefix lbd: <https://lbdserver.org/vocabulary#>\nprefix dcat: <http://www.w3.org/ns/dcat#>\nprefix owl: <http://www.w3.org/2002/07/owl#> \n INSERT DATA {\n      <${e}> a lbd:Aggregator .\n    }`;return await j(n,e,t),e}}async function C(t,e,a){if(a.info.isLoggedIn){t||(t=d()),e||(e=[a.info.webId]);let r=await T(a.info.webId,a);r||(r=await P(a));const o=r+t+"/",i=`\nprefix ldp: <http://www.w3.org/ns/ldp#> \nprefix lbd: <https://lbdserver.org/vocabulary#>\nprefix dcat: <http://www.w3.org/ns/dcat#>\nprefix owl: <http://www.w3.org/2002/07/owl#> \n INSERT DATA {\n      <${o}> a lbd:PartialProject ;\n      lbd:hasProjectUri <${o}>;\n      lbd:hasProjectId "${t}";\n      lbd:hasLocalArtefactRegistry <${o}artefactRegistry.ttl> .\n    }`;await j(i,o,a);for(const t of e){const e=`\nprefix ldp: <http://www.w3.org/ns/ldp#> \nprefix lbd: <https://lbdserver.org/vocabulary#>\nprefix dcat: <http://www.w3.org/ns/dcat#>\nprefix owl: <http://www.w3.org/2002/07/owl#> \n INSERT DATA {\n        <${o}> lbd:hasMember <${t}> .\n      }`;await j(e,o,a),await q(t,o,a)}await H(`${o}artefactRegistry.ttl`,{mimeType:"text/turtle"},a),await W(o+".acl",(t=>`\n    @prefix  acl:  <http://www.w3.org/ns/auth/acl#> .       \n      \n    <#${(0,n.v4)()}>\n        a acl:Authorization;\n        acl:accessTo    <./>;\n        acl:default     <./> ;\n        <http://www.w3.org/ns/auth/acl#agent> <${t.info.webId}>;\n        acl:mode <http://www.w3.org/ns/auth/acl#Read>, <http://www.w3.org/ns/auth/acl#Write>, <http://www.w3.org/ns/auth/acl#Append>, <http://www.w3.org/ns/auth/acl#Control>.\n            \n    <#${(0,n.v4)()}>\n        a acl:Authorization;\n        acl:accessTo    <./>;\n        acl:default     <./> ;\n        <http://www.w3.org/ns/auth/acl#agentClass> <http://xmlns.com/foaf/0.1/Agent>;\n        acl:mode <http://www.w3.org/ns/auth/acl#Read>.\n    `)(a),{mimeType:"text/turtle"},a)}}async function L(t,e){return await T(t.info.webId,t)+await m(e)+"/artefactRegistry.ttl"}async function W(t,e,a,n){try{if(!a.overwrite&&await f(t,n))throw new Error("Resource already exists");let o;a.mimeType?o=a.mimeType:(o=mime.lookup(t),!1===o&&(o="text/plain"));var r={method:"PUT",headers:{"Content-Type":o},body:e,redirect:"follow"};let i;return i=await n.fetch(t,r),void(205!==i.status&&(i=await fetch(t,r)))}catch(t){throw console.log("error",t),t.message=`Unable to upload resource - ${t.message}`,t}}async function S(t,e){const a=await T(e.info.webId,e),n=a+await m(t)+"/";if((await x(a,e)).includes(n))return console.log("guess",n),n;throw Error("Can't find your project. Could it be you need to initiate it first?")}async function D(t,e){const a=await p(`prefix ldp: <http://www.w3.org/ns/ldp#> select * where {<${t}> ldp:inbox ?inbox .}`,[t],e),n=await a.bindings();console.log("bind",n);let r=n[0].get("?inbox").id;return r.endsWith("/")||(r+="/"),r}async function k(t){const e=await D(t.info.webId,t),a=await R(e,t),n=await T(t.info.webId,t),r=await x(n,t),o=await query(a,"\n  prefix lbd: <https://lbdserver.org/vocabulary#> \n  prefix as: <https://www.w3.org/ns/activitystreams#> \n  SELECT ?sender WHERE {?invite a lbd:projectInvitation. ?this as:actor ?sender; as:object ?invite .}");await p(query,a,t);const{sender:i}=await u(projects,["sender"]);return o.map((t=>t.sender.value)).filter((t=>!r.includes(t)))}async function H(t,e,a){await W(t,"",e,a)}async function q(t,e,a){const n=a.info.webId,r=await D(t,a)+d()+".ttl",o=`\n  @prefix foaf: <http://xmlns.com/foaf/0.1/>.\n  @prefix solid: <http://www.w3.org/ns/solid/terms#>.\n  @prefix lbd: <https://lbdserver.org/vocabulary#>.\n  @prefix ldp: <http://www.w3.org/ns/ldp#> .\n  @prefix as: <https://www.w3.org/ns/activitystreams#> .\n  @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n  @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.\n\n<>\n  a as:Announce ;\n  as:actor <${n}> ;\n  as:object <#invite> ;\n  as:target <${t}> ;\n  as:updated "${(new Date).toISOString()}"^^xsd:dateTime .\n\n<#invite> a lbd:projectInvitation, rdfs:seeAlso <${e}>  .\n  `;await W(r,o,{mimeType:"text/turtle"},a)}}}]);